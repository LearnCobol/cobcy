/* seminit.cc
**
**	Implements initialization actions for COBOL compiler.
*/

#include "semextern.h"
#include "semdecl.h"
#include "semfile.h"
#include "semcontrol.h"

void FinishDecl (void)
{
    CloseScopeLevels (0);
    AssociateRecordsWithFD();
    outfile << "\n";
}

void StartCode (void)
{
    FinishDecl();
    InitializeVariables();

    GenIndent();
    outfile << "int _FirstParagraph ()\n";
    outfile << "{\n";
    ++ NestingLevel;
    GenIndent();
    outfile << "_SetVarValues();\n\n";
}

void EndCode (void)
{
    GenParagraphCalls();
}

void StartProgram (void)
{
CobolSymbol * NewSymbol;

    outfile.open (OutputFile);

    outfile << "/* " << (char*) OutputFile << "\n";
    outfile << "**\n**\tGenerated by Cobol-to-C compiler from ";
    outfile << (char*) SourceFile << ".\n";
    outfile << "*/\n\n";
    outfile << "#include <stdio.h>\n";
    outfile << "#include \"cobfunc.h\"\n\n";
    outfile << "char _space_var [201];\n";
    outfile << "long int _zero_var = 0;\n";
    outfile << "long int _index = 0;\n";
    outfile << "\n";

    SymTable.Clear();

    NewSymbol = new CobolSymbol;
    NewSymbol->Kind = CobolSymbol::Variable;
    NewSymbol->SetPicture ("x(200)");
    NewSymbol->SetName ("_space_var");
    SymTable.Insert (NewSymbol->CobolName, NewSymbol);

    NewSymbol = new CobolSymbol;
    NewSymbol->Kind = CobolSymbol::Variable;
    NewSymbol->SetPicture ("9(1)");
    NewSymbol->SetName ("_zero_var");
    SymTable.Insert (NewSymbol->CobolName, NewSymbol);
}

void EndProgram (void)
{
    outfile.close();
}

