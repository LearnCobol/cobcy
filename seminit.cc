/* seminit.cc
**
**	Implements initialization actions for COBOL compiler.
*/

#ifdef __MSDOS__
#include "semexter.h"
#include "semcontr.h"
#else
#include "semextern.h"
#include "semcontrol.h"
#endif
#include "semdecl.h"
#include "semfile.h"

/*--------------------------------------------------*/
  extern char CurParName[];
  extern char CodeFile[];
  extern char DeclFile[];
  extern char SourceFile[];
/*--------------------------------------------------*/
  ofstream 			codef;
  ofstream 			declf;
  Stack<StackEntry> 		SemStack;
  HashTable<CobolSymbol> 	SymTable;
  int 				NestingLevel = 0;
/*--------------------------------------------------*/

void FinishDecl (void)
{
    CloseScopeLevels (0);
    AssociateRecordsWithFD();
    codef << "\n";
}

void StartCode (void)
{
    FinishDecl();
    InitializeVariables();

    // This needs to be initialized for gotos
    strcpy (CurParName, "_FirstParagraph");

    GenIndent();
    codef << "int _FirstParagraph ()\n";
    codef << "{\n";
    ++ NestingLevel;
    GenIndent();
    codef << "_SetVarValues();\n\n";
}

void EndCode (void)
{
    GenParagraphCalls();
}

void StartProgram (void)
{
CobolSymbol * NewSymbol;

    codef.open (CodeFile);
    declf.open (DeclFile);

    codef << "/* " << (char*) CodeFile << "\n";
    codef << "**\n**\tGenerated by Cobol-to-C compiler from ";
    codef << (char*) SourceFile << ".\n";
    codef << "*/\n\n";

    declf << "/* " << (char*) DeclFile << "\n";
    declf << "**\n**\tGenerated by Cobol-to-C compiler from ";
    declf << (char*) SourceFile << ".\n";
    declf << "*/\n\n";


    codef << "#include <stdio.h>\n";
    codef << "#include \"cobfunc.h\"\n";

    // This is the file for forward function declarations, their indices, etc.
    codef << "#include \"" << DeclFile << "\"\n\n";

    codef << "char _space_var [201];\n";
    codef << "char _tmpbuf [201];\n";	// For MOVEs
    codef << "long int _zero_var = 0;\n";
    codef << "long int _index = 0;\n";	// Loop iterator
    codef << "\n";

    // First paragraph's index is defined in the source file, since
    //	in the future separate compilation is possible and first paragraph
    //	is defined in every module.
    codef << "const long int _pi__FirstParagraph = 0;\n";
    // This is Current Paragraph Index
    codef << "long int _cpi;\n";	
    codef << "\n";

    SymTable.Clear();

    NewSymbol = new CobolSymbol;
    NewSymbol->Kind = CobolSymbol::Variable;
    NewSymbol->SetPicture ("x(200)");
    NewSymbol->SetName ("_space_var");
    SymTable.Insert (NewSymbol->CobolName, NewSymbol);

    NewSymbol = new CobolSymbol;
    NewSymbol->Kind = CobolSymbol::Variable;
    NewSymbol->SetPicture ("9(1)");
    NewSymbol->SetName ("_zero_var");
    SymTable.Insert (NewSymbol->CobolName, NewSymbol);
}

void EndProgram (void)
{
    codef.close();
    declf.close();
}

