// This file is part of cobcy, a COBOL-to-C compiler.
//
// Copyright (C) 1995-2008 by Mike Sharov <msharov@users.sourceforge.net>
// This file is free software, distributed under the MIT License.

#include "semextern.h"
#include "semcontrol.h"
#include "semdecl.h"
#include "semfile.h"
#include "symfile.h"
#include "symvar.h"

/*--------------------------------------------------*/
  ofstream 			codef;
  ofstream 			declf;
  vector<StackEntry*> 		SemStack;
  symtable_t		 	SymTable;
  int 				NestingLevel = 0;
  bool				CodeBegan = false;
/*--------------------------------------------------*/

void FinishDecl (void)
{
#ifndef NDEBUG
    cout << "DBG: Finishing declarations\n";
#endif
    CloseScopeLevels (0);
    AssociateRecordsWithFD();
    codef << "\n";
}

void StartCode (void)
{
    FinishDecl();
#ifndef NDEBUG
    cout << "DBG: Starting code, initializing variables\n";
#endif
    InitializeVariables();

#ifndef NDEBUG
    cout << "DBG: Beginning first paragraph\n";
#endif
    GenIndent();
    codef << "int _FirstParagraph (void)\n";
    codef << "{\n";
    ++ NestingLevel;

    CodeBegan = true;
}

void EndCode (void)
{
#ifndef NDEBUG
    cout << "DBG: Finished code, genrating main()\n";
#endif
    codef << "\n";
    codef << "int main ()\n";
    codef << "{\n";
    ++ NestingLevel;

    GenIndent();
    codef << "_SetVarValues();\n\n";
    OpenSpecialFiles();		// Generates code if there are any

    GenParagraphCalls();
    CloseSpecialFiles();

    codef << "\n";
    GenIndent();
    codef << "return (0);\n";
    -- NestingLevel;
    GenIndent();
    codef << "}\n";
}

void StartProgram (void)
{
CobolVar * NewSymbol;
CobolFile * NewFile;

    codef.open (CobcyConfig.CodeFile);
    declf.open (CobcyConfig.DeclFile);

    codef << "/* " << (char*) CobcyConfig.CodeFile << "\n";
    codef << "**\n**\tGenerated by Cobol-to-C compiler from ";
    codef << (char*) CobcyConfig.SourceFile << ".\n";
    codef << "*/\n\n";

    declf << "/* " << (char*) CobcyConfig.DeclFile << "\n";
    declf << "**\n**\tGenerated by Cobol-to-C compiler from ";
    declf << (char*) CobcyConfig.SourceFile << ".\n";
    declf << "*/\n\n";


    codef << "#include <stdio.h>\n";	// For files and IO
    codef << "#include <string.h>\n";	// For memset
    codef << "#include <cobfunc.h>\n";	// For internal functions

    // This is the file for forward function declarations, their indices, etc.
    codef << "#include \"" << CobcyConfig.DeclFile << "\"\n\n";

    codef << "char _space_var [201];\n";
    codef << "long int _zero_var = 0;\n";
    codef << "long int _index = 0;\n";	// Loop iterator
    codef << "\n";

    // First paragraph's index is defined in the source file, since
    //	in the future separate compilation is possible and first paragraph
    //	is defined in every module.
    codef << "const long int _pi__FirstParagraph = 0;\n";
    // This is Current Paragraph Index
    codef << "long int _cpi;\n";	
    codef << "\n";

    SymTable.clear();

    // Space filler variable
    NewSymbol = new CobolVar;
    NewSymbol->SetPicture ("x(200)");
    NewSymbol->SetName ("_space_var");
#ifndef NDEBUG
    cout << "DBG: Declaring _space_var\n";
#endif
    SymTable["_space_var"] = NewSymbol;

    // Zero filler variable
    NewSymbol = new CobolVar;
    NewSymbol->SetPicture ("9(1)");
    NewSymbol->SetName ("_zero_var");
#ifndef NDEBUG
    cout << "DBG: Declaring _zero_var\n";
#endif
    SymTable["_zero_var"] = NewSymbol;

    // Default output stream
    NewFile = new CobolFile;
    NewFile->SetName ("stdout");
    NewFile->SetOrganization (ORG_Sequential);
    NewFile->SetAccessMode (AM_Sequential);
#ifndef NDEBUG
    cout << "DBG: Declaring stdout\n";
#endif
    SymTable["stdout"] = NewFile;
}

void EndProgram (void)
{
    codef.flush();
    codef.close();
    declf.flush();
    declf.close();
}

