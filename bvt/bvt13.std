------------------------------------------------------------
/* bvt13.h
**
**	Generated by Cobol-to-C compiler from bvt13.cob.
*/

const int _pi_write_loop = 1;
const int _pi_end_loop = 2;
------------------------------------------------------------
/* bvt13.c
**
**	Generated by Cobol-to-C compiler from bvt13.cob.
*/

#include <stdio.h>
#include <string.h>
#include <cobfunc.h>
#include "bvt13.h"

char _space_var [201];
long int _zero_var = 0;
long int _index = 0;

const long int _pi__FirstParagraph = 0;
long int _cpi;

/* This program is called test-program */

DBF_FILE * sample_rel_file;

struct {
    char name [26];
    char address [26];
    long int aptnum;
    char city [16];
    long int zip;
} sample_rel_record;
long int count_var;


void _SetVarValues (void)
{
    memset (_space_var, ' ', 200);
    _space_var[200] = 0;
    count_var = 1;
}

int _FirstParagraph (void)
{
    fprintf (stdout, "This program will write a file with relative organization");
    fprintf (stdout, "\n");
    fprintf (stdout, "The file will be called 'relative.dbf'");
    fprintf (stdout, "\n");
    _OpenRelativeFile (&sample_rel_file, "relative.dbf", " name C 25 0 address C 25 0 aptnum N 4 0 city C 15 0 zip N 10 0", "wb");
    return(1);
}

int write_loop (void)
{
write_loop:
    _AssignVarString (sample_rel_record.name, "Whoever", 25, 0);
    _AssignVarString (sample_rel_record.address, "Wherever", 25, 0);
    sample_rel_record.aptnum = count_var;
    _AssignVarString (sample_rel_record.city, "I don't know", 15, 0);
    sample_rel_record.zip = 837480985;
    DBF_AppendRecord (sample_rel_file);
    _WriteStringVar (sample_rel_file->DataDesc, sample_rel_record.name, "xxxxxxxxxxxxxxxxxxxxxxxxx");
    _WriteStringVar (sample_rel_file->DataDesc, sample_rel_record.address, "xxxxxxxxxxxxxxxxxxxxxxxxx");
    _WriteIntegerVar (sample_rel_file->DataDesc, sample_rel_record.aptnum, "9999");
    _WriteStringVar (sample_rel_file->DataDesc, sample_rel_record.city, "xxxxxxxxxxxxxxx");
    _WriteIntegerVar (sample_rel_file->DataDesc, sample_rel_record.zip, "99999b9999");
    DBF_SeekToNext (sample_rel_file);
    count_var = count_var + 1;
    if ((count_var > 10))
    {
        return (_pi_end_loop - _pi_write_loop);
    }
    goto write_loop;
    return(1);
}

int end_loop (void)
{
end_loop:
    fflush (sample_rel_file->DataDesc);
    _CloseRelativeFile (&sample_rel_file);
    fprintf (stdout, "All done.");
    fprintf (stdout, "\n");
    return (32001);
    return(1);
}


int main ()
{
    _SetVarValues();

    _cpi = _pi__FirstParagraph;
    while (_cpi <= 2)
    {
        switch (_cpi)
        {
            case 0: _cpi += _FirstParagraph (); break;
            case 1: _cpi += write_loop(); break;
            case 2: _cpi += end_loop(); break;
            default:
                    fprintf (stderr, "Broken paragraph chain!\n");
                    _cpi = 3;
                    break;
        }
    }

    return (0);
}
------------------------------------------------------------
This program will write a file with relative organization
The file will be called 'relative.dbf'
All done.
------------------------------------------------------------
