------------------------------------------------------------
// bvt10.h
// Generated by Cobol-to-C compiler from bvt10.cob.

enum {
    _pi__FirstParagraph,
    _pi_proc_double,
    _pi__NParagraphs,
    _pi__Exit,
    _po__Next = 1
};

static int proc_double (void);
------------------------------------------------------------
// bvt10.c
// Generated by Cobol-to-C compiler from bvt10.cob.

#include <coblib/cobfunc.h>
#include "bvt10.h"

// This program is called test-program
long counter;

long some_number;


static void _SetVarValues (void)
{
    counter = 0;
    some_number = 1;
}

static int _FirstParagraph (void)
{
    printf ("Should get 4, 32, 8, 16384");
    printf ("\n");
    for (_index = 0; _index < 2; ++ _index)
	proc_double();
    _WriteIntegerVar (stdout, some_number, "9999999999");
    printf ("\n");
    some_number = 1;
    for (counter = 1; counter <= 5; counter += 1)
	proc_double();
    _WriteIntegerVar (stdout, some_number, "9999999999");
    printf ("\n");
    some_number = 1;
    for (counter = 1; counter <= 6; counter += 2)
	proc_double();
    _WriteIntegerVar (stdout, some_number, "9999999999");
    printf ("\n");
    some_number = 1;
    for (counter = 1; (some_number <= 10000); counter += 2)
	proc_double();
    _WriteIntegerVar (stdout, some_number, "9999999999");
    printf ("\n");
    printf ("All done");
    printf ("\n");
    return _pi__Exit;
    return _po__Next;
}

static int proc_double (void)
{
proc_double: UNUSED
    some_number = some_number * 2;
    return _po__Next;
}

int main (void)
{
    _SetVarValues();
    for (long cpi = _pi__FirstParagraph; cpi < _pi__NParagraphs;) {
	switch (cpi) {
	    case _pi__FirstParagraph:	cpi += _FirstParagraph(); break;
	    case _pi_proc_double:	cpi += proc_double(); break;
	    default:	cpi = _pi__Exit; assert (!"abnormal exit"); break;
	}
    }
    return EXIT_SUCCESS;
}
------------------------------------------------------------
Should get 4, 32, 8, 16384
         4
        32
         8
     16384
All done
------------------------------------------------------------
