------------------------------------------------------------
/* bvt10.h
**
**	Generated by Cobol-to-C compiler from bvt10.cob.
*/

const int _pi_proc_double = 1;
------------------------------------------------------------
/* bvt10.c
**
**	Generated by Cobol-to-C compiler from bvt10.cob.
*/

#include <stdio.h>
#include <string.h>
#include <cobfunc.h>
#include "bvt10.h"

char _space_var [201];
long int _zero_var = 0;
long int _index = 0;

const long int _pi__FirstParagraph = 0;
long int _cpi;

/* This program is called test-program */
long int counter;

long int some_number;


void _SetVarValues (void)
{
    memset (_space_var, ' ', 200);
    _space_var[200] = 0;
    counter = 0;
    some_number = 1;
}

int _FirstParagraph (void)
{
    fprintf (stdout, "Should get 4, 32, 8, 16384");
    fprintf (stdout, "\n");
    for (_index = 0; _index < 2; ++ _index)
        proc_double();
    _WriteIntegerVar (stdout, some_number, "999999999");
    fprintf (stdout, "\n");
    some_number = 1;
    for (counter = 1; counter <= 5; counter += 1)
        proc_double();
    _WriteIntegerVar (stdout, some_number, "999999999");
    fprintf (stdout, "\n");
    some_number = 1;
    for (counter = 1; counter <= 6; counter += 2)
        proc_double();
    _WriteIntegerVar (stdout, some_number, "999999999");
    fprintf (stdout, "\n");
    some_number = 1;
    for (counter = 1; (some_number <= 10000); counter += 2)
        proc_double();
    _WriteIntegerVar (stdout, some_number, "999999999");
    fprintf (stdout, "\n");
    fprintf (stdout, "All done");
    fprintf (stdout, "\n");
    return(1);
}

int proc_double (void)
{
proc_double:
    some_number = some_number * 2;
    return(1);
}


int main ()
{
    _SetVarValues();

    _cpi = _pi__FirstParagraph;
    while (_cpi <= 1)
    {
        switch (_cpi)
        {
            case 0: _cpi += _FirstParagraph (); break;
            case 1: _cpi += proc_double(); break;
            default:
                    fprintf (stderr, "Broken paragraph chain!\n");
                    _cpi = 2;
                    break;
        }
    }

    return (0);
}
------------------------------------------------------------
Should get 4, 32, 8, 16384
        4
       32
        8
    16384
All done
------------------------------------------------------------
