------------------------------------------------------------
// bvt05.h
// Generated by Cobol-to-C compiler from bvt05.cob.

enum {
    _pi__FirstParagraph,
    _pi_start_x,
    _pi_loop_x,
    _pi__NParagraphs,
    _pi__Exit,
    _po__Next = 1
};

static int start_x (void);
static int loop_x (void);
------------------------------------------------------------
// bvt05.c
// Generated by Cobol-to-C compiler from bvt05.cob.

#include <coblib/cobfunc.h>
#include "bvt05.h"

// This program is called test-program
// Written on intel486
// Written for intel486

FILE * card_in;

struct {
    char card_name [37];
    struct {
	char digits_one_to_three [5];
	char digits_four_and_five [4];
	char digits_six_to_nine [6];
    } card_social_security_number;
    char filler000 [38];
} card_in_record;

FILE * print_out;

struct {
    struct {
	char print_one [5];
	char print_two [2];
	char print_three [4];
	char print_four [2];
	char print_five [6];
    } print_social_security_number;
    char space_x [12];
    char print_name [37];
} print_out_record;

static void _SetVarValues (void)
{
}

static int _FirstParagraph (void)
{
    return _po__Next;
}

static int start_x (void)
{
start_x: UNUSED
    _OpenSequentialFile (&card_in, "card-reader", "rb");
    _OpenSequentialFile (&print_out, "output-file", "wb");
    return _po__Next;
}

static int loop_x (void)
{
loop_x: UNUSED
    _ReadStringVar (card_in, card_in_record.card_name, "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
    _ReadStringVar (card_in, card_in_record.card_social_security_number.digits_one_to_three, "xxxx");
    _ReadStringVar (card_in, card_in_record.card_social_security_number.digits_four_and_five, "xxx");
    _ReadStringVar (card_in, card_in_record.card_social_security_number.digits_six_to_nine, "xxxxx");
    _ReadStringVar (card_in, card_in_record.filler000, "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
    fgetc (card_in);
    if (feof (card_in))
    {
	fflush (print_out);
	_CloseSequentialFile (print_out);
	_CloseSequentialFile (card_in);
	return _pi__Exit;
    }
    _AssignVarString (print_out_record.print_social_security_number.print_one, card_in_record.card_social_security_number.digits_one_to_three, 4, 4);
    _AssignVarString (print_out_record.print_social_security_number.print_two, "-", 1, 0);
    _AssignVarString (print_out_record.print_social_security_number.print_three, card_in_record.card_social_security_number.digits_four_and_five, 3, 3);
    _AssignVarString (print_out_record.print_social_security_number.print_four, "-", 1, 0);
    _AssignVarString (print_out_record.print_social_security_number.print_five, card_in_record.card_social_security_number.digits_six_to_nine, 5, 5);
    _AssignVarString (print_out_record.space_x, _space_var, 11, 201);
    _AssignVarString (print_out_record.print_name, card_in_record.card_name, 36, 36);
    _WriteStringVar (print_out, print_out_record.print_social_security_number.print_one, "xxxx");
    _WriteStringVar (print_out, print_out_record.print_social_security_number.print_two, "x");
    _WriteStringVar (print_out, print_out_record.print_social_security_number.print_three, "xxx");
    _WriteStringVar (print_out, print_out_record.print_social_security_number.print_four, "x");
    _WriteStringVar (print_out, print_out_record.print_social_security_number.print_five, "xxxxx");
    _WriteStringVar (print_out, print_out_record.space_x, "xxxxxxxxxxx");
    _WriteStringVar (print_out, print_out_record.print_name, "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
    fprintf (print_out, "\n");
    _WriteStringVar (stdout, print_out_record.print_social_security_number.print_one, "xxxx");
    _WriteStringVar (stdout, print_out_record.print_social_security_number.print_two, "x");
    _WriteStringVar (stdout, print_out_record.print_social_security_number.print_three, "xxx");
    _WriteStringVar (stdout, print_out_record.print_social_security_number.print_four, "x");
    _WriteStringVar (stdout, print_out_record.print_social_security_number.print_five, "xxxxx");
    _WriteStringVar (stdout, print_out_record.space_x, "xxxxxxxxxxx");
    _WriteStringVar (stdout, print_out_record.print_name, "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
    printf ("\n");
    goto loop_x;
    return _po__Next;
}

int main (void)
{
    _SetVarValues();
    for (long cpi = _pi__FirstParagraph; cpi < _pi__NParagraphs;) {
	switch (cpi) {
	    case _pi__FirstParagraph:	cpi += _FirstParagraph(); break;
	    case _pi_start_x:	cpi += start_x(); break;
	    case _pi_loop_x:	cpi += loop_x(); break;
	    default:	cpi = _pi__Exit; assert (!"abnormal exit"); break;
	}
    }
    return EXIT_SUCCESS;
}
------------------------------------------------------------

Runtime error: could not open file 'card-reader'!

------------------------------------------------------------
