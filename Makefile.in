CPP	= @CXX@
CC	= @CC@
AR	= @AR@
RANLIB	= @RANLIB@

#OPTIM	= -O2
OPTIM	=

CLAGS	= -w $(OPTIM) -pipe -Iadtlib -DCAN_HAVE_STDIO=@can_have_stdio@

LEX	= @LEX@
YACC	= @YACC@

LIBS	= @LEXLIB@

EXE	= cobcy
SRCS	= main.cc semdecl.cc symbol.cc semutil.cc semarith.cc seminfo.cc \
	seminit.cc semfile.cc semconio.cc semcontrol.cc \
	cobol_yacc.c cobol_lex.c \
	cobfunc.c
OBJS	= main.o semdecl.o symbol.o semutil.o semarith.o seminfo.o \
	seminit.o semfile.o semconio.o semcontrol.o \
	cobol_lex.o cobol_yacc.o 

CLIB	= libcobol.a
COBJS	= cobfunc.o

#############################################

all:	$(EXE) $(CLIB)

$(EXE):	$(OBJS)
	@echo Linking cobcy ...
	@$(CPP) -o $(EXE) $(OBJS) $(LIBS)
#	@strip $(EXE)

cobol_lex.c:	cobol.l y.tab.h
	@echo Building lexical analyzer ...
	@$(LEX) cobol.l
	@mv lex.yy.c cobol_lex.c

cobol_yacc.c:	cobol.y
	@echo Building parser ...
	@$(YACC) cobol.y
	@mv y.tab.c cobol_yacc.c

y.tab.h:
	@echo Updating parser symbol defs ...
	@$(YACC) -d cobol.y
	@rm -f y.tab.c

$(CLIB):	$(COBJS)
	@echo Building cobcy runtime library ...
	@rm -f $(CLIB)
	@$(AR) rs $(CLIB) $(COBJS)
	@RANLIB_STATEMENT

cobfunc.o:	cobfunc.c
	@echo Compiling $< ...
	@$(CC) $(CFLAGS) -c $<

.cc.o:
	@echo Compiling $< ...
	@$(CPP) $(CFLAGS) -c $<
.c.o:
	@echo Compiling $< ...
	@$(CPP) $(CFLAGS) -c $<

checkin:
	@echo Checking in everything ...
	@ci -l $(SRCS) *.h cobol.l cobol.y Makefile.in configure.in

revert:
	@echo Swash! Dang! Boooom!
	@echo Canceling all recent changes.
	@co $(SRCS) *.h cobol.l cobol.y Makefile.in configure.in
	@chmod u+w $(SRCS) *.h cobol.l cobol.y Makefile.in configure.in

depend:
	@echo Generating dependencies ...
	@$(CPP) $(CFLAGS) -MM $(SRCS) > .depend

clean:
	@rm -f $(OBJS) *.bak *~ y.tab.h cobol_lex.c cobol_yacc.c
	@rm -f $(COBJS)

spotless: clean
	@./cleantest
	@rm -f $(EXE) $(CLIB)

ifeq (.depend,$(wildcard, .depend))
include $(DEPEND_FILE)
endif

