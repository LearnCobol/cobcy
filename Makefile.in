CPP	= @CXX@
CC	= @CC@
AR	= @AR@
RANLIB	= @RANLIB@

INCDIR	= -I./adtlib/include
LIBDIR	= -L./adtlib/lib

WARN	= -w
OPTIM	= -O6 -DNDEBUG

#WARN	= -Wall
#OPTIM	= -g

DEFS	= -DCAN_HAVE_STDIO=@can_have_stdio@

CFLAGS	= $(WARN) $(OPTIM) $(INCDIR) $(DEFS)
LDFLAGS	= -s $(LIBDIR)

LEX	= @LEX@
YACC	= @YACC@

LIBS	= @LEXLIB@

EXE	= cobcy
SRCS	= main.cc semdecl.cc semutil.cc semarith.cc seminfo.cc \
	seminit.cc semfile.cc semconio.cc semcontrol.cc symbase.cc \
	symconst.cc symfile.cc sympic.cc symrec.cc symvar.cc \
	cobfunc.c
OBJS	= main.o semdecl.o semutil.o semarith.o seminfo.o \
	seminit.o semfile.o semconio.o semcontrol.o \
	symbase.o symconst.o symdata.o symfile.o symlabel.o \
	sympic.o symrec.o symvar.o \
	cobol_lex.o cobol_yacc.o 

RCSED	= Makefile.in cobfunc.c cobfunc.h cobol.l cobol.y \
	configure.in lyextern.h main.cc semactions.h semarith.cc \
	semarith.h semconio.cc semconio.h semcontrol.cc semcontrol.h \
	semdecl.cc semdecl.h semextern.h semfile.cc semfile.h \
	seminfo.cc seminfo.h seminit.cc seminit.h semtypes.h \
	semutil.cc semutil.h symbase.cc \
	symbase.h symconst.cc symconst.h symdata.h symfile.cc \
	symfile.h sympic.cc sympic.h symrec.cc symrec.h \
	symvar.cc symvar.h

CLIB	= libcobol.a
COBJS	= cobfunc.o
DBFOBJS	= dbf/dbf.o dbf/ndx.o

ADTLIB	= adtlib/libadt.a

#############################################

all:	$(ADTLIB) $(EXE) $(CLIB)

$(ADTLIB):
	@echo Building base classes ...
	@make -C adtlib/src install

$(EXE):	$(OBJS)
	@echo Linking cobcy ...
	@$(CPP) $(LDFLAGS) -o $(EXE) $(OBJS) $(LIBS) ${ADTLIB}
	@strip $(EXE)

cobol_lex.c:	cobol.l y.tab.h
	@echo Building lexical analyzer ...
	@$(LEX) cobol.l
	@mv lex.yy.c cobol_lex.c

cobol_yacc.c:	cobol.y
	@echo Building parser ...
	@$(YACC) cobol.y
	@mv y.tab.c cobol_yacc.c

y.tab.h:
	@echo Updating parser symbol defs ...
	@$(YACC) -d cobol.y
	@rm -f y.tab.c

$(CLIB):	$(COBJS)
	@echo Making DBF objects ...
	@make -C dbf
	@echo Building cobcy runtime library ...
	@rm -f $(CLIB)
	@$(AR) rs $(CLIB) $(COBJS) $(DBFOBJS)
	@$(RANLIB) $(CLIB)

cobfunc.o:	cobfunc.c
	@echo Compiling $< ...
	@$(CC) $(CFLAGS) -c $<

.cc.o:
	@echo Compiling $< ...
	@$(CPP) $(CFLAGS) -c $<
.c.o:
	@echo Compiling $< ...
	@$(CPP) $(CFLAGS) -c $<

checkin:
	@echo Checking in everything ...
	@ci -l $(RCSED)

revert:
	@echo Swash! Dang! Boooom!
	@echo Canceling all recent changes.
	@co $(RCSED)
	@chmod u+w $(RCSED)

depend:
	@echo Generating dependencies ...
	@$(CPP) $(CFLAGS) -MM $(SRCS) > .depend
	@make -C adtlib/src depend
	@make -C dbf depend

clean:
	@rm -f $(OBJS) *.bak *~ y.tab.h cobol_lex.c cobol_yacc.c
	@rm -f $(COBJS)
	@+make -C adtlib/src clean
	@+make -C dbf clean

spotless: clean
	@./cleantest
	@rm -f $(EXE) $(CLIB)
	@rm -f $(ADTLIB)

ifeq (.depend,$(wildcard .depend))
include .depend
endif

